# GitHub Workflows file

name: main

defaults:
  run:
    shell: bash --noprofile --norc -euo pipefail {0}

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: "Version `x.y.z` (without leading `v`)"
        type: string
        required: true

jobs:
  bazel_build:
    name: Bazel test
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        build:
          # - macos
          - linux
          - windows
        include:
          # - build: macos
          #   os: macos-latest
          - build: linux
            os: ubuntu-24.04
          - build: windows
            os: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Setup Windows Bazelrc
        # https://bazel.build/configure/windows
        run: |
          echo "startup --output_user_root=C:/tmp" > ${{ github.workspace }}/user.bazelrc
        shell: cmd
        if: runner.os == 'Windows'
      - name: Run tests
        run: bazel build --config=ci -- //...

  mkrelease:
    name: Create Release
    runs-on: ubuntu-24.04
    needs: bazel_build

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Environment variables
        run: |
          ARCHIVE_NAME=rules_mdbook-v${VERSION}.tar.gz
          printf 'ARCHIVE=%s/.github/%s\n' "${WORKSPACE}" "${ARCHIVE_NAME}" | tee -a "${GITHUB_ENV}"
          printf 'ARCHIVE_NAME=%s\n' "${ARCHIVE_NAME}" | tee -a "${GITHUB_ENV}"
          printf 'REPO=%s\n' "${REPO}" | tee -a "${GITHUB_ENV}"
          printf 'VERSION=%s\n' "${VERSION}" | tee -a "${GITHUB_ENV}"
          printf 'WORKSPACE=%s\n' "${WORKSPACE}" | tee -a "${GITHUB_ENV}"
        env:
          REPO: ${{ github.repository }}
          VERSION: ${{ github.event.inputs.version || github.sha }}
          WORKSPACE: ${{ github.workspace }}
      - name: Create archive
        run: |
          tar -czf "${ARCHIVE}" -C "${WORKSPACE}" --exclude=".git" --exclude=".github" *
      - name: Show
        run: |
          find . -path ./.git -prune -o -path ./.jj -prune -o -type f
      - name: Generate SRI
        run: |
          ARCHIVE_INTEGRITY=$(openssl dgst -sha256 -binary "${ARCHIVE}" | openssl base64 -A)
          printf 'ARCHIVE_INTEGRITY=sha256-%s\n' "${ARCHIVE_INTEGRITY}" | tee -a "${GITHUB_ENV}"
      - name: Generate release notes
        run: |
          envsubst < .github/release-notes.md.in > release-notes.md
          gh api repos/${REPO}/releases/generate-notes -f tag_name=v${VERSION} | jq -r .body >> release-notes.md
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Show release notes
        run: |
          cat release-notes.md
      - name: Create Release
        if: github.event_name == 'workflow_dispatch'
        run: |
          gh release create v${VERSION} --notes-file release-notes.md "${ARCHIVE}"
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Summary
        run: |
          cat release-notes.md >> "${GITHUB_STEP_SUMMARY}"

  # The success job is here to consolidate the total success/failure state of
  # all other jobs. This job is then included in the GitHub branch protection
  # rule which prevents merges unless all other jobs are passing. This makes
  # it easier to manage the list of jobs via this yml file and to prevent
  # accidentally adding new jobs without also updating the branch protections.
  success:
    name: Success gate
    if: always()
    needs:
      - mkrelease
    runs-on: ubuntu-24.04
    steps:
      - run: jq --exit-status 'all(.result == "success")' <<< '${{ toJson(needs) }}'
      - name: Done
        run: exit 0
